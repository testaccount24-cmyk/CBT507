//SASTOTPL  PROC  INDSN='??',  NAME OF INPUT SAS DATASET
//  OPT1='S=72,NODATE,NOCENTER', SAS OPTIONS FOR 1ST SAS STEP
//  OPT2='S=72', SAS OPTIONS FOR 2ND SAS STEP ("GENDATA")
//  DATA='??',     NAME FOR GENERATED DATAFILE
//  DATADEV='TSOWRK', DEVICE TYPE FOR GENERATED DATAFILE      <<
//  LAB='SL',      LABEL TYPE FOR GENERATED DATAFILE
//  SEQ='1',       SEQUENCE # ON ITS VOLUME FOR GEN. DATAFILE
//  DATTYPE='NEW', INITIAL STATUS OF GENERATED DATAFILE
//  DATDISP='CATLG', FINAL DISPOSITION (KEEP,CATLG) OF GEN. DATAFILE
//  DATBOMB='KEEP', DISPOSITION OF GEN. DATAFILE IF ABEND OCCURS
//  DATSP='20',    PRIMARY # TRKS FOR GENERATED DATAFILE
//  DATIN='5',     SECONDARY ALLOCATION # TRKS FOR GEN. DATAFILE
//  DATRLSE=',RLSE', ALLOWS RELEASE OF UNUSED SPACE FOR GEN. DATAFILE
//  CBKNAME='&&CODEBOOK',  DSNAME FOR GENERATED SOURCE CODEBOOK
//  CBKUNIT='TSOWRK', DEVICE TYPE FOR GENERATED SOURCE CODEBOOK
//  CBKSP=50,      PRIMARY NO. BLOCKS SPACE FOR GEN. SOURCE CODEBOOK
//  CBKIN=20,      SECONDARY SPACE SIZE FOR GENERATED SOURCE CODEBOOK
//  CBKTYPE=NEW,   INITIAL STATUS OF GENERATED SOURCE CODEBOOK
//  CBKDISP=PASS,  FINAL DISPOSITION OF GENERATED SOURCE CODEBOOK
//  CBKBOMB=DELETE, DISPOSITION OF GENERATED SOURCE CODEBOOK IF ABEND
//  CBKBLK=6160,   BLOCKSIZE OF GENERATED SOURCE CODEBOOK
//  CBKLREC=80,    RECORD LENGTH OF GENERATED SOURCE CODEBOOK
//  CBKRECF=FB,    RECORD FORMAT OF GENERATED SOURCE CODEBOOK
//  PUTNAME='&&PUT',  DSNAME FOR GENERATED SAS PUT STMTS
//  PUTUNIT='TSOWRK', DEVICE TYPE FOR GENERATED SAS PUT STMTS
//  PUTSP=50,      PRIMARY NO. BLOCKS SPACE FOR GEN. SAS PUT STMTS
//  PUTIN=20,      SECONDARY SPACE SIZE FOR GENERATED SAS PUT STMTS
//  PUTTYPE=NEW,   INITIAL STATUS OF GENERATED SAS PUT STMTS
//  PUTDISP=CATLG, FINAL DISPOSITION OF GENERATED SAS PUT STMTS
//  PUTBOMB=DELETE, DISPOSITION OF GENERATED SAS PUT STMTS IF ABEND
//  PUTBLK=6160,   BLOCKSIZE OF GENERATED SAS PUT STMTS
//  PUTLREC=80,    RECORD LENGTH OF GENERATED SAS PUT STMTS
//  PUTRECF=FB,    RECORD FORMAT OF GENERATED SAS PUT STMTS
//  LISTING='A',   SYSOUT SPECIFICATION FOR ALL LISTINGS             <<
//  PUNCH=B,       SYSOUT SPECIFICATION FOR PUNCH OUTPUT FROM SAS    <<
//  CNTSP=200,     PRIMARY # BLKS DISK SPACE FOR CONTENTS WORKFILE
//  CNTIN=50,      SECONDARY # BLKS FOR CONTENTS WORKFILE
//  CNTBLK=6650,CNTLREC=133,CNTRECF=FB,
//  CONTROL=IEFBR14,CONMAX=100K,
//  CTLCORE='300K',
//  ENTRY=SAS,
//  GENCORE='500K',
//  GSTDSN='SYS2.TPL.V6.SASTOTPL.LOADLIB', <
//  LINKPGM='SASTOTPL',
//  PUTCORE='500K',
//  QUOT=''''
//  SASDSN='SYS2.SAS.LIBRARY',                                       <<
//  SORT=1,
//  SORTMSG=NO,
//*
//*********************************************************************
//*                                                                   *
//*      S A S T O T P L - - A PROCEDURE TO CREATE A SEQUENTIAL FILE  *
//*           OF DATA FROM A SAS DATASET, AND A TPL SOURCE CODEBOOK   *
//*           TO DESCRIBE IT.                                         *
//*                                                                   *
//*      THE FOLLOWING PARAMETERS ARE REQUIRED:                       *
//*                                                                   *
//*           INDSN:    DSNAME OF THE SAS DATASET.                    *
//*           DATA:     DSNAME OF THE GENERATED DATAFILE              *
//*                                                                   *
//*      THE SAS STATEMENT INVOKING "PROC CONTENTS" FOR THE SAS       *
//*           DATASET MUST FOLLOW A "//GENERATE.CONTENTS" DD CARD.    *
//*                                                                   *
//*      THE CONTROL STATEMENTS FOR THE SASTOTPL LINKAGE PROGRAM MUST *
//*           FOLLOW A "//CONTROL.CARDS" DD CARD.                     *
//*                                                                   *
//*      IN CASE OF ANY PROBLEMS, CONTACT THE TPL SYSTEM TEAM;        *
//*            TELEPHONE:  357-5999                                   *
//*                                          LAST UPDATED ON 08/21/84 *
//*********************************************************************
//*
//*
//SYSCNTRL  EXEC  PGM=&CONTROL,REGION=&CONMAX
//* *****     ALLOCATE WORKING DATASETS                         *******
//CODEBOOK  DD  DSN=&CBKNAME,DISP=(&CBKTYPE,PASS),UNIT=&CBKUNIT,
//  SPACE=(&CBKBLK,(&CBKSP,&CBKIN)),
//  DCB=(RECFM=&CBKRECF,LRECL=&CBKLREC,BLKSIZE=&CBKBLK)
//PUT  DD  DSN=&PUTNAME,DISP=(&PUTTYPE,PASS),UNIT=&PUTUNIT,
//  SPACE=(&PUTBLK,(&PUTSP,&PUTIN)),
//  DCB=(RECFM=&PUTRECF,LRECL=&PUTLREC,BLKSIZE=&PUTBLK)
//OUT  DD  DSN=&QUOT.&DATA.&QUOT,UNIT=&DATADEV,
//  DISP=(&DATTYPE,PASS),LABEL=(&SEQ,&LAB),
//  SPACE=(TRK,(&DATSP,&DATIN))
//*
//*
//GENERATE  EXEC  PGM=&ENTRY,PARM='&OPT1',REGION=&GENCORE,
//  COND=(0,LT,SYSCNTRL)
//LIBRARY  DD  DSN=&&LIBRARY,SPACE=(CYL,(1,,20)),
//  DISP=(MOD,DELETE)
//STEPLIB  DD  DSN=&SASDSN,DISP=SHR
//  DD  DSN=SYS1.PLIBASE,DISP=SHR                                    <<
//  DD  DSN=*.LIBRARY,DISP=(OLD,DELETE),VOL=REF=*.LIBRARY
//WORK  DD  UNIT=SYSDA,SPACE=(CYL,(4,24))  TEMPORARY DATA SETS
//FT11F001  DD  SYSOUT=&LISTING                       LOG
//FT12F001  DD  DSN=&&CONTENTS,UNIT=WORK,DISP=(NEW,PASS),
//  SPACE=(&CNTBLK,(&CNTSP,&CNTIN),RLSE),
//  DCB=(RECFM=&CNTRECF,LRECL=&CNTLREC,BLKSIZE=&CNTBLK)
//FT13F001  DD  SYSOUT=&PUNCH
//FT15F001  DD  UNIT=TSOWRK,SPACE=(TRK,(1,5)),  PARMCARDS
//  DCB=(RECFM=FB,LRECL=80,BLKSIZE=800,BUFNO=1)
//SORTMSGS  DD  DDNAME=&SORTMSG
//YES  DD  SYSOUT=&LISTING
//NO  DD  DUMMY
//SORTLIB  DD  DSN=SYS1.SORTLIB,DISP=SHR                             <<
//SORTWK01  DD  UNIT=WORK,SPACE=(CYL,(&SORT,8))
//SORTWK02  DD  UNIT=WORK,SPACE=(CYL,(&SORT,8))
//SORTWK03  DD  UNIT=WORK,SPACE=(CYL,(&SORT,8))
//IN  DD  DSN=&INDSN,DISP=(SHR,PASS)
//SYSIN  DD  DDNAME=CONTENTS
//CONTENTS  DD  DUMMY
//*
//*
//CONTROL  EXEC  PGM=&LINKPGM,PARM=OKAY,REGION=&CTLCORE,
//  COND=((0,LT,SYSCNTRL),(0,LT,GENERATE))
//STEPLIB  DD  DSN=SYS1.COBLIB,DISP=SHR                              <<
//  DD  DSN=&GSTDSN,DISP=SHR
//  DD  DSN=SYS1.SORTLIB,DISP=SHR                                    <<
//SORTWK01  DD  UNIT=WORK,SPACE=(TRK,50,,CONTIG)
//SORTWK02  DD  UNIT=WORK,SPACE=(TRK,50,,CONTIG)
//SORTWK03  DD  UNIT=WORK,SPACE=(TRK,50,,CONTIG)
//SORTMSGS DD  SYSOUT=&LISTING
//SYSPRINT  DD  SYSOUT=&LISTING
//SYSDBOUT  DD  SYSOUT=&LISTING
//SYSOUT  DD  SYSOUT=&LISTING
//SYSUDUMP  DD  SYSOUT=&LISTING
//CONTENTS  DD  DSN=&&CONTENTS,DISP=(OLD,PASS)
//CODEBOOK  DD  DSN=&CBKNAME,DISP=(OLD,&CBKDISP,&CBKBOMB),
//  SPACE=(&CBKBLK,(&CBKSP,&CBKIN),RLSE),
//  DCB=(RECFM=&CBKRECF,LRECL=&CBKLREC,BLKSIZE=&CBKBLK)
//PUT  DD  DSN=&PUTNAME,DISP=(OLD,&PUTDISP,&PUTBOMB),
//  SPACE=(&PUTBLK,(&PUTSP,&PUTIN),RLSE),
//  DCB=(RECFM=&PUTRECF,LRECL=&PUTLREC,BLKSIZE=&PUTBLK)
//SYSIN  DD  DDNAME=CARDS
//CARDS  DD  DUMMY
//*
//*
//PUTDATA  EXEC  PGM=&ENTRY,PARM='&OPT2',REGION=&PUTCORE,
//  COND=((0,LT,SYSCNTRL),(0,LT,CONTROL),(0,LT,GENERATE))
//LIBRARY  DD  UNIT=WORK,DSN=&&LIBRARY,SPACE=(CYL,(1,,20)),
//  DISP=(MOD,DELETE)
//STEPLIB  DD  DSN=&SASDSN,DISP=SHR
//  DD  DSN=SYS1.PLIBASE,DISP=SHR                                    <<
//  DD  DSN=*.LIBRARY,DISP=(OLD,PASS),VOL=REF=*.LIBRARY
//WORK  DD  UNIT=SYSDA,SPACE=(CYL,(4,24))  TEMPORARY DATA SETS
//FT11F001  DD  SYSOUT=&LISTING                       LOG
//FT12F001  DD  SYSOUT=&LISTING                       PRINT
//FT13F001  DD  SYSOUT=&PUNCH
//FT15F001  DD  UNIT=WORK,SPACE=(TRK,(1,5)),  PARMCARDS
//  DCB=(RECFM=FB,LRECL=80,BLKSIZE=800,BUFNO=1)
//SORTMSGS  DD  DDNAME=&SORTMSG
//YES  DD  SYSOUT=&LISTING
//NO  DD  DUMMY
//SORTLIB  DD  DSN=SYS1.SORTLIB,DISP=SHR                             <<
//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,(&SORT,8))
//SORTWK02  DD  UNIT=SYSDA,SPACE=(CYL,(&SORT,8))
//SORTWK03  DD  UNIT=SYSDA,SPACE=(CYL,(&SORT,8))
//IN  DD  DSN=&INDSN,DISP=SHR
//SYSIN  DD  DSN=&PUTNAME,DISP=(OLD,&PUTDISP,&PUTBOMB)
//OUT  DD  DSN=&QUOT.&DATA.&QUOT,DISP=(OLD,&DATDISP,&DATBOMB),
//  LABEL=(&SEQ,&LAB),SPACE=(TRK,(&DATSP,&DATIN)&DATRLSE)
//*
//*  END OF PROCEDURE TO CREATE A SEQUENTIAL DATAFILE FROM A SAS
//*      DATASET AND A TPL CODEBOOK TO DESCRIBE THAT DATAFILE.
//*
//* PEND
